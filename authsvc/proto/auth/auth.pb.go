// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/baddayduck/services/authsvc/proto/auth/auth.proto

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	github.com/baddayduck/services/authsvc/proto/auth/auth.proto

It has these top-level messages:
	Session
	LoginRequest
	LoginResponse
	LogoutRequest
	LogoutResponse
	ReadSessionRequest
	ReadSessionResponse
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Session struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Created  int64  `protobuf:"varint,3,opt,name=created" json:"created,omitempty"`
	Expires  int64  `protobuf:"varint,4,opt,name=expires" json:"expires,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Session) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Session) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Session) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Session) GetExpires() int64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

type LoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResponse struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LoginResponse) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

type LogoutRequest struct {
	SessionId string `protobuf:"bytes,1,opt,name=sessionId" json:"sessionId,omitempty"`
}

func (m *LogoutRequest) Reset()                    { *m = LogoutRequest{} }
func (m *LogoutRequest) String() string            { return proto.CompactTextString(m) }
func (*LogoutRequest) ProtoMessage()               {}
func (*LogoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LogoutRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type LogoutResponse struct {
}

func (m *LogoutResponse) Reset()                    { *m = LogoutResponse{} }
func (m *LogoutResponse) String() string            { return proto.CompactTextString(m) }
func (*LogoutResponse) ProtoMessage()               {}
func (*LogoutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ReadSessionRequest struct {
	SessionId string `protobuf:"bytes,1,opt,name=sessionId" json:"sessionId,omitempty"`
}

func (m *ReadSessionRequest) Reset()                    { *m = ReadSessionRequest{} }
func (m *ReadSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadSessionRequest) ProtoMessage()               {}
func (*ReadSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReadSessionRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type ReadSessionResponse struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *ReadSessionResponse) Reset()                    { *m = ReadSessionResponse{} }
func (m *ReadSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadSessionResponse) ProtoMessage()               {}
func (*ReadSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ReadSessionResponse) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func init() {
	proto.RegisterType((*Session)(nil), "Session")
	proto.RegisterType((*LoginRequest)(nil), "LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "LoginResponse")
	proto.RegisterType((*LogoutRequest)(nil), "LogoutRequest")
	proto.RegisterType((*LogoutResponse)(nil), "LogoutResponse")
	proto.RegisterType((*ReadSessionRequest)(nil), "ReadSessionRequest")
	proto.RegisterType((*ReadSessionResponse)(nil), "ReadSessionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Auth service

type AuthClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error)
	ReadSession(ctx context.Context, in *ReadSessionRequest, opts ...client.CallOption) (*ReadSessionResponse, error)
}

type authClient struct {
	c           client.Client
	serviceName string
}

func NewAuthClient(serviceName string, c client.Client) AuthClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "auth"
	}
	return &authClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *authClient) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.Logout", in)
	out := new(LogoutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ReadSession(ctx context.Context, in *ReadSessionRequest, opts ...client.CallOption) (*ReadSessionResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.ReadSession", in)
	out := new(ReadSessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthHandler interface {
	Login(context.Context, *LoginRequest, *LoginResponse) error
	Logout(context.Context, *LogoutRequest, *LogoutResponse) error
	ReadSession(context.Context, *ReadSessionRequest, *ReadSessionResponse) error
}

func RegisterAuthHandler(s server.Server, hdlr AuthHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Auth{hdlr}, opts...))
}

type Auth struct {
	AuthHandler
}

func (h *Auth) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.AuthHandler.Login(ctx, in, out)
}

func (h *Auth) Logout(ctx context.Context, in *LogoutRequest, out *LogoutResponse) error {
	return h.AuthHandler.Logout(ctx, in, out)
}

func (h *Auth) ReadSession(ctx context.Context, in *ReadSessionRequest, out *ReadSessionResponse) error {
	return h.AuthHandler.ReadSession(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/baddayduck/services/authsvc/proto/auth/auth.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x6d, 0xfa, 0xdd, 0x2b, 0x2d, 0xc8, 0xed, 0x10, 0x45, 0x0c, 0x95, 0xa7, 0x4a, 0x08, 0x47,
	0x6a, 0x27, 0x10, 0x0b, 0x23, 0x12, 0x53, 0x58, 0x59, 0xdc, 0xe4, 0xd4, 0x5a, 0xd0, 0x38, 0xe4,
	0xec, 0x02, 0x3f, 0x85, 0x7f, 0x8b, 0xea, 0x24, 0xfd, 0x82, 0xa1, 0x4b, 0xa4, 0x77, 0x2f, 0xf7,
	0xee, 0xbd, 0x27, 0xc3, 0xc3, 0x52, 0x99, 0x95, 0x5d, 0x88, 0x58, 0xaf, 0xc3, 0x85, 0x4c, 0x12,
	0xf9, 0x9d, 0xd8, 0xf8, 0x2d, 0x24, 0xcc, 0x37, 0x2a, 0x46, 0x0a, 0xa5, 0x35, 0x2b, 0xda, 0xc4,
	0x61, 0x96, 0x6b, 0xa3, 0x1d, 0x72, 0x1f, 0xe1, 0x30, 0x57, 0xd0, 0x79, 0x41, 0x22, 0xa5, 0x53,
	0x36, 0x84, 0xba, 0x4a, 0x7c, 0x6f, 0xe2, 0x4d, 0x7b, 0x51, 0x5d, 0x25, 0x2c, 0x80, 0xae, 0x25,
	0xcc, 0x53, 0xb9, 0x46, 0xbf, 0xee, 0xa6, 0x3b, 0xcc, 0x7c, 0xe8, 0xc4, 0x39, 0x4a, 0x83, 0x89,
	0xdf, 0x98, 0x78, 0xd3, 0x46, 0x54, 0xc1, 0x2d, 0x83, 0x5f, 0x99, 0xca, 0x91, 0xfc, 0x66, 0xc1,
	0x94, 0x90, 0xbf, 0xc2, 0xc5, 0xb3, 0x5e, 0xaa, 0x34, 0xc2, 0x0f, 0x8b, 0x64, 0x8e, 0xf4, 0xbd,
	0x13, 0xfd, 0x31, 0xb4, 0x70, 0x2d, 0xd5, 0x7b, 0x79, 0xb8, 0x00, 0xdb, 0x8d, 0x4c, 0x12, 0x7d,
	0xea, 0xbc, 0x38, 0xdb, 0x8b, 0x76, 0x98, 0xcf, 0x61, 0x50, 0xaa, 0x53, 0xa6, 0x53, 0x42, 0xc6,
	0xa1, 0x43, 0x45, 0x32, 0xa7, 0xde, 0x9f, 0x75, 0x45, 0x99, 0x34, 0xaa, 0x08, 0x7e, 0xeb, 0x96,
	0xb4, 0x35, 0x95, 0xa7, 0x6b, 0xe8, 0x95, 0xdc, 0x53, 0x55, 0xc5, 0x7e, 0xc0, 0xaf, 0x60, 0x58,
	0xfd, 0x5e, 0x1c, 0xe1, 0x33, 0x60, 0x11, 0xca, 0xa4, 0x12, 0x3e, 0x4b, 0xe5, 0x0e, 0x46, 0x47,
	0x3b, 0xe7, 0xfb, 0x9d, 0xfd, 0x78, 0xd0, 0x7c, 0xb4, 0x66, 0xc5, 0xa6, 0xd0, 0x72, 0x69, 0xd9,
	0x40, 0x1c, 0x76, 0x1a, 0x0c, 0xc5, 0x51, 0x09, 0xbc, 0xc6, 0x6e, 0xa0, 0x5d, 0x78, 0x66, 0x8e,
	0xdb, 0x67, 0x0d, 0x2e, 0xc5, 0x49, 0x98, 0x1a, 0xbb, 0x87, 0xfe, 0x81, 0x35, 0x36, 0x12, 0x7f,
	0xc3, 0x05, 0x63, 0xf1, 0x8f, 0x7b, 0x5e, 0x5b, 0xb4, 0xdd, 0x83, 0x9a, 0xff, 0x06, 0x00, 0x00,
	0xff, 0xff, 0xdc, 0xdf, 0x6c, 0x18, 0x90, 0x02, 0x00, 0x00,
}
